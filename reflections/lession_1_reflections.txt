How did viewing a diff between two versions of a file help you see the bug that was introduced? It allowed me see the bug very quickly instead of looking the entire file

How could having easy access to the entire history of a file make you a more efficient programmer in the long term? Having easy access to the entire history file makes a more efficient programmer in the long run as you will easily see how you fixed a bug previously. Knowing that you can always access to the entire history gives you the freedom to rewrite codes and explore other versions of the file. 

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does? pros of manually creating a commit: have less versions of the same file (some changes are not worth creating a commit), easier to compare the latest version with the previous version; cons of having versions automatically saved: human error - one may forget to save/commit same files.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately? Git allows saving multiple files in one commit since all files will be saved in one repository. However, Google docs treats each file separately and saves them separately. 

How can you use the commands Git log and Git diff to view the history of files? Git log allows you see all the commits you've done and Git diff helps you to easily identify (the additions and deletions) of the committed files.

How might using version control make you more confident to make changes that could break something? Version control helps you restore all your files to how they were before you committed again one more time. It easily allows you to explore and see the significant changes you've done.

Now that you have your workspace set up, what do you want to try using Git for? I would like to see and try how to programmers use Git and GitHub to work together.
