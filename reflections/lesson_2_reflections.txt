What happens when you initialize a repository? Why do you need to do it? When you initialize a new repo, a new directory gets created. You need it in order to track all committed and changes of files in this directory.

How is the staging area different from the working directory and the repository? What value do you think it offers? The staging area is where you can update files before committing them, and commit them all at once to the repo. It allows programmers to track/view the history of files.  

How can you use the staging area to make sure you have one commit per logical change? Staging area allows you to make additional changes and/up update of the file you're currently working on, and the commit each one of them separately.  

What are some situations when branches would be helpful in keeping your history organized? How would branches help? having a file in the master that fully works, and then creating branches allows you to play around with other branches, which are your experimental branches. For instance, if a programmer encounters a bug in the current branch, it would be easy to fix it by seeing the additions and deletions (differences) with the master, which always works. 


How do the diagrams help you visualize the branch structure? It helps you identify the parent of each commit. 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do? The result is that you can avoid duplicates and limit the number of branches you have. The reason we represent it in a diagram is because it makes it easy for visual learners to see exactly what's happening when we merge two branches/features into on branch, usually the master.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually? pros: avoids human errors and efficiency, cons: it's always good for a human to look at the code before merging

